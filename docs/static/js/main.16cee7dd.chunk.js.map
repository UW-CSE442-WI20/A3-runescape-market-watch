{"version":3,"sources":["PriceVolumeChart.js","App.js","serviceWorker.js","index.js"],"names":["PriceVolumeChart","props","node","React","createRef","this","drawChart","ref","data","margin","width","Math","max","height","priceHeight","volumeHeight","gpFormat","gp","d3","volFormat","div","current","selectAll","remove","xMin","d","ts","xMax","xScale","domain","range","priceChart","append","attr","style","text","yPriceMin","min","average","daily","yPriceMax","yPriceScale","call","tickFormat","dailyLine","x","y","averageLine","priceFocus","classed","volumeChart","yVolumeMax","volume","yVolumeScale","volData","filter","enter","_","i","on","date","invert","bisectDate","length","d0","d1","currData","select","updateLegends","left","currentData","legendKeys","Object","keys","toLocaleDateString","year","month","day","Component","App","state","loading","items","activeItemId","chart","csvToJson","bind","onResize","filterSidebar","Papa","parse","complete","download","header","skipEmptyLines","delimiter","window","addEventListener","setState","chartWidth","innerWidth","chartHeight","innerHeight","csvData","itemMap","sort","a","b","Date","forEach","line","id","push","sidebarItems","k","mostRecent","slice","name","console","log","filteredItems","map","item","src","ItemMetadata","icon","className","key","onClick","alt","e","target","value","toLowerCase","newItems","startsWith","renderLoadingAnimation","metadata","pricedata","chartData","row","type","placeholder","onChange","renderSidebar","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.16cee7dd.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from \"d3\";\n\nclass PriceVolumeChart extends Component {\n  constructor(props) {\n    super(props);\n    this.node = React.createRef();\n  }\n\n  componentDidUpdate() {\n    this.drawChart();\n  }\n\n  componentDidMount() {\n    this.drawChart();\n  }\n\n  render() {\n    return (<div ref={this.node} />)\n  }\n\n  drawChart() {\n    const { data } = this.props;\n    const margin = { top: 0, right: 100, bottom: 40, left: 50, inner: 40 };\n    const width = Math.max(0, this.props.width - margin.left - margin.right );\n    const height = Math.max(0, this.props.height - margin.top - margin.bottom - 2 * margin.inner );\n    const priceHeight = 0.6 * height\n    const volumeHeight = 0.4 * height\n\n    const gpFormat = gp => `${d3.format('.3~s')(gp)} gp`;\n    const volFormat = d3.format('.3~s');\n\n    const div = d3.select(this.node.current);\n    div.selectAll('*').remove();\n   \n    const xMin = d3.min(data, d => d.ts);\n    const xMax = d3.max(data, d => d.ts);\n    const xScale = d3\n      .scaleTime()\n      .domain([xMin, xMax])\n      .range([0, width]);\n    \n\n    // Build Price Chart //////////////////////////////////////////////////////\n    const priceChart = div\n      .append('svg')\n      .attr('width', width + margin.left + margin.right)\n      .attr('height', priceHeight + margin.top + margin.inner)\n      .append('g')\n      .attr('transform', `translate(${margin.left}, ${margin.top})`);\n\n    priceChart\n      .append(\"text\")\n      .attr(\"x\", (width / 2))             \n      .attr(\"y\", 20)\n      .attr(\"text-anchor\", \"middle\")  \n      .style(\"font-size\", \"16px\") \n      .style(\"text-decoration\", \"underline\")  \n      .text(\"Price\"); \n\n    const yPriceMin = Math.min(d3.min(data, d => d.average), d3.min(data, d => d.daily));\n    const yPriceMax = Math.max(d3.max(data, d => d.average), d3.max(data, d => d.daily));\n    \n    const yPriceScale = d3\n      .scaleLinear()\n      .domain([Math.max(0, yPriceMin - 5), yPriceMax + 5])\n      .range([priceHeight, 0.1 * priceHeight]);\n\n    priceChart\n      .append('g')\n      .attr('id', 'xAxis')\n      .attr('transform', `translate(0, ${priceHeight})`)\n      .call(d3.axisBottom(xScale));\n\n    priceChart\n      .append('g')\n      .attr('id', 'yAxis')\n      .attr('transform', `translate(${width}, 0)`)\n      .call(d3.axisRight(yPriceScale).tickFormat(gpFormat));\n      \n    // generates lines when called\n    const dailyLine = d3\n      .line()\n      .x(d => xScale(d.ts))\n      .y(d => yPriceScale(d.daily));\n\n    const averageLine = d3\n      .line()\n      .x(d => xScale(d.ts))\n      .y(d => yPriceScale(d.average));\n      \n    priceChart\n      .append('path')\n      .data([data]) \n      .style('fill', 'none')\n      .attr('id', 'dailyLine')\n      .attr('stroke', 'steelblue')\n      .attr('stroke-width', '1.5')\n      .attr('d', dailyLine);\n\n    priceChart\n      .append('path')\n      .data([data])\n      .style('fill', 'none')\n      .attr('id', 'averageLine')\n      .attr('stroke', 'goldenrod')\n      .attr('stroke-width', '1.5')\n      .attr('d', averageLine);\n      \n    const priceFocus = priceChart\n      .append('g')\n      .attr('class', 'focus')\n      .style('display', 'none');\n\n    priceFocus\n      .append('circle')\n        .classed('daily', true)\n        .attr('r', 4.5)\n        .attr('fill', 'steelblue')\n    \n    priceFocus\n      .append('circle')\n        .classed('average', true)\n        .attr('r', 4.5)\n        .attr('fill', 'goldenrod')\n    \n    priceFocus\n      .append('line')\n        .classed('y', true)\n        .style('fill', 'none')\n        .style('pointer-events', 'all')\n        .style('stroke', '#67809f')\n        .style('stroke-width', '1.5px')\n        .style('stroke-dasharray', '3 3');\n\n    // Build Volume Chart /////////////////////////////////////////////////////\n    const volumeChart = div\n      .append('svg')\n      .attr('width', width + margin.left + margin.right)\n      .attr('height', volumeHeight + margin.bottom + margin.inner)\n      .append('g')\n      .attr('transform', `translate(${margin.left}, ${margin.top})`);\n      \n    volumeChart\n      .append(\"text\")\n      .attr(\"x\", (width / 2))             \n      .attr(\"y\", 20)\n      .attr(\"text-anchor\", \"middle\")  \n      .style(\"font-size\", \"16px\") \n      .style(\"text-decoration\", \"underline\")  \n      .text(\"Volume\"); \n\n    const yVolumeMin = 0;\n    // const yVolumeMin = d3.min(data, d => d.volume);\n    const yVolumeMax = d3.max(data, d => d.volume);\n\n    const yVolumeScale = d3\n      .scaleLinear()\n      .domain([yVolumeMin, yVolumeMax])\n      .range([volumeHeight, 0.1 * volumeHeight]);\n\n    // volumeChart\n    //   .append('rect')\n    //   .attr('class', 'overlay')\n    //   .attr('width', width)\n    //   .attr('height', volumeHeight)\n    //   .style('fill', 'none')\n    //   .style('pointer-events', 'all');\n      \n    volumeChart\n      .append('g')\n      .attr('id', 'xAxis')\n      .attr('transform', `translate(0, ${volumeHeight})`)\n      .call(d3.axisBottom(xScale));\n\n    volumeChart\n      .append('g')\n      .attr('id', 'yAxis')\n      .attr('transform', `translate(${width}, 0)`)\n      .call(d3.axisRight(yVolumeScale).tickFormat(volFormat));\n      \n    const volData = data.filter(d => d.volume != null);\n    volumeChart\n      .selectAll()\n      .data(volData)\n      .enter()\n      .append('rect')\n      .attr('id', (_, i) => `vol_${i}`)\n      .attr('x', d => xScale(d.ts))\n      .attr('y', d => yVolumeScale(d.volume))\n      .attr('class', 'vol')\n      .attr('fill', 'steelblue')\n      .attr('width', 4)\n      .attr('height', d => volumeHeight - yVolumeScale(d.volume));\n      \n    div\n      .on('mousemove', generateCrosshair)\n      .on('mouseover', () => priceFocus.style('display', null))\n      .on('mouseout', () => {\n        priceFocus.style('display', 'none');\n        volumeChart.selectAll('rect').attr('fill', 'steelblue');\n      });\n\n    const bisectDate = d3.bisector(d => d.ts).left;\n\n    function generateCrosshair() {\n      const date = xScale.invert(d3.mouse(this)[0] - margin.left);\n      const i = bisectDate(data, date, 1, data.length - 1);\n      const d0 = data[i - 1];\n      const d1 = data[i];\n      const currData = (date - d0.ts) > (d1.ts - date) ? d1 : d0;\n\n      priceFocus\n        .select('circle.daily')\n        .attr(\n          'transform',\n          `translate(${xScale(currData.ts)}, ${yPriceScale(currData.daily)})`\n        );\n        \n      priceFocus\n        .select('circle.average')\n        .attr(\n          'transform',\n          `translate(${xScale(currData.ts)}, ${yPriceScale(currData.average)})`\n        );\n\n      priceFocus\n        .select('line.y')\n        .attr('x1', 0)\n        .attr('x2', 0)\n        .attr('y1', 10 )\n        .attr('y2', priceHeight)\n        .attr(\n          'transform',\n          `translate(${xScale(currData.ts)}, 0)`\n        )\n\n      priceFocus.selectAll('text').remove()\n\n      // priceFocus\n      //   .append('text')\n      //   .attr('fill', 'black')\n      //   .attr(\n      //     'transform',\n      //     `translate(${xScale(currData.ts)}, 0)`\n      //   )\n      //   .text(`${currData.ts.toLocaleString('en-US', options)}`);\n\n      volumeChart\n        .selectAll('rect')\n        .attr('fill', 'steelblue')\n\n      volumeChart\n        .select(`rect#vol_${i}`)\n        .attr('fill', 'darkblue');\n      updateLegends(currData);\n    }\n\n    /* Legends */\n    const updateLegends = currentData => {\n      d3.selectAll('.lineLegend').remove();\n\n      const legendKeys = Object.keys(data[0]);\n      const lineLegend = priceChart\n        .selectAll('.lineLegend')\n        .data(legendKeys)\n        .enter()\n        .append('g')\n        .attr('class', 'lineLegend')\n        .attr('transform', (_, i) => `translate(0, ${i * 20})`);\n\n      lineLegend\n        .append('text')\n        .style('fill', 'black')\n        .attr('transform', 'translate(15,15)')\n        .text(d => {\n          if (d === 'ts') {\n            const options = { year: 'numeric', month: 'long', day: 'numeric' }\n            return currentData[d].toLocaleDateString('en-US', options);\n          } else if (d === 'daily') {\n            return `Price:   ${gpFormat(currentData[d])}`;\n          } else if (d === 'average') {\n            return `Average: ${gpFormat(currentData[d])}`;\n          } else if (d === 'volume') {\n            return `Volume traded: ${volFormat(currentData[d])}`;\n          } else {\n            return;\n          }\n        });\n    };\n  }\n}\n\nexport default PriceVolumeChart;","import React, { Component } from \"react\";\nimport \"./App.scss\";\n\nimport Papa from \"papaparse\";\nimport * as d3 from \"d3\";\nimport ItemMetadata from './data/better_items.json';\nimport PriceVolumeChart from './PriceVolumeChart.js';\n\nconst TITLE_HEIGHT = 35;\nconst SIDEBAR_WIDTH = 250;\nconst ITEM_HEADER_HEIGHT = 250;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      items: null,\n      activeItemId: null\n    };\n    this.chart = React.createRef();\n    this.csvToJson = this.csvToJson.bind(this);\n    this.onResize = this.onResize.bind(this);\n    this.filterSidebar = this.filterSidebar.bind(this);\n  }\n\n  // async load the csv file\n  componentDidMount() {\n    Papa.parse('./data.csv', {\n      complete: this.csvToJson,\n      download: true,\n      header: true,\n      skipEmptyLines: true,\n      delimiter: ','\n    });\n    \n    window.addEventListener('resize', this.onResize, false);\n    this.onResize();\n  }\n\n  onResize() {\n    this.setState(\n      { chartWidth: window.innerWidth - SIDEBAR_WIDTH,\n        chartHeight: window.innerHeight - ITEM_HEADER_HEIGHT - TITLE_HEIGHT});\n  }\n\n  csvToJson(csvData) {\n    let itemMap = {};\n\n    // sort by timestamp so all values are\n    // inserted into itemMap in sorted order\n    csvData.data.sort((a, b) => new Date(a.ts) - new Date(b.ts));\n    csvData.data.forEach(line => {\n      if (!(line.id in itemMap)) {\n        itemMap[line.id] = [];\n      }\n      itemMap[line.id].push(line);\n    });\n\n    // generate some stats here? like percent change?\n    // and store them in this.state so we dont have to\n    // recompute\n    // or we could query that on item selection\n\n    let sidebarItems = [];\n    for (var k in itemMap) {\n      let mostRecent = itemMap[k].slice(-1)[0];\n\n      sidebarItems.push({\n        name: mostRecent.name,\n        average: mostRecent.average,\n        daily: mostRecent.daily,\n        volume: mostRecent.volume,\n        id: mostRecent.id\n      });\n    }\n\n    console.log(sidebarItems[0].name);\n\n    this.setState({\n      loading: false,\n      items: itemMap,\n      sidebarItems: sidebarItems,\n      filteredItems: sidebarItems,\n      activeItemId: sidebarItems[0].id\n    });\n  }\n\n  renderSidebar(sidebarItems) {\n    return sidebarItems.map((item, i) => {\n      let src = item.id in ItemMetadata ? ItemMetadata[item.id].icon : \"\";\n      let isActive = item.id === this.state.activeItemId;\n      let className = isActive ? \"SidebarItem Active\" : \"SidebarItem\"; \n      \n      return (\n        <div className={className} key={i} onClick={() => this.setState({activeItemId: item.id})}>\n          <img className=\"SidebarItemImage\" src={src} alt={\"MEANINGFUL ALT TEXT\"}/>\n          <p>{item.name}</p>\n        </div>\n      );\n    });\n  }\n  \n  filterSidebar(e) {\n    const text = e.target.value.toLowerCase();\n    const newItems = this.state.sidebarItems.filter(\n      item => item.name.toLowerCase().startsWith(text)\n    );\n    this.setState({\n      filteredItems: newItems\n    });\n  }\n\n  renderLoadingAnimation() {\n    return (\n        <div className=\"LoadingContainer\">\n            <div className=\"lds-roller\" style={{\"color\": \"black\"}}>\n                <div></div>\n                <div></div>\n                <div></div>\n                <div></div>\n                <div></div>\n                <div></div>\n                <div></div>\n                <div></div>\n            </div>\n        </div>\n    );\n}\n\n  render() {\n    if (this.state.loading) {\n      return this.renderLoadingAnimation()\n    }\n\n    const { activeItemId, chartWidth, chartHeight } = this.state;\n    const metadata = ItemMetadata[activeItemId]; // type, image urls\n    const pricedata = this.state.sidebarItems.filter((e) => e.id === activeItemId)[0]; // daily values, and image\n    const pricehistory = this.state.items[activeItemId]; // full price history\n\n\n    const chartData = pricehistory.map((row) => ({\n      'ts': new Date(row['ts']),\n      'daily': +row['daily'],\n      'average': +row['average'],\n      'volume': +row['volume']\n    }))\n\n    const gpFormat = gp => `${d3.format('.3~s')(gp)} gp`;\n    const volFormat = d3.format('.3~s');\n\n\n    const inputStyles = {width: '100%'}\n    return (\n      <div>\n      <div className=\"Container\">\n        <div className=\"Sidebar\">\n          <input type=\"text\" className=\"Searchbar\" style={inputStyles} placeholder=\"Search...\" onChange={this.filterSidebar} />\n          <div className=\"ItemsContainer\">\n          {\n            this.renderSidebar(this.state.filteredItems)\n          }\n          </div>\n      \n        </div>\n        <div className=\"Content\">\n          <div style={{\"fontSize\": \"30px\", \"textAlign\": \"center\"}}>Runescape Market Watch</div>\n          <div className=\"ItemInfo\">\n            <img\n              className=\"LargeItemImage\"\n              src={metadata.icon}\n              alt={`${metadata.name} thumbnail`}\n            />\n            <h1 className=\"LargeItemName\">{pricedata.name}</h1>\n            <div className=\"Statistics\">\n              <div className=\"Statistic\">{`Daily Price: ${gpFormat(pricedata.daily)}`}</div>\n              <div className=\"Statistic\">{`Daily Volume: ${volFormat(pricedata.volume)}`}</div>\n              <div className=\"Statistic\">{`Avg. Price: ${pricedata.average}`}</div>\n              {/* <div className=\"Statistic\">{`Daily % Change: ${-1}`}</div>\n              <div className=\"Statistic\">{`1 Month % Change: ${-1}`}</div>\n              <div className=\"Statistic\">{`3 Month % Change: ${-1}`}</div> */}\n            </div>\n          </div>\n          <div className=\"ChartContainer\" ref={this.chart} style={{margin: 0}}>\n            <PriceVolumeChart data={chartData}\n                              width={chartWidth}\n                              height={chartHeight} />\n          </div>\n          \n        </div>\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}